{"version":3,"sources":["actions/actions.js","components/Screen.jsx","constants/mainSegmentValues.js","constants/topLeftSegmentValues.js","components/Keypad.jsx","components/BoxBody.jsx","App.jsx","serviceWorker.js","reducer/rootReducer.js","sagas/rootSaga.js","constants/api.js","constants/masterCode.js","index.js"],"names":["backlightOff","type","submit","data","payload","masterCodeCheck","Screen","props","backlight_off","code","is_locked","initial_value","status","index","error","validating","locking","unlocking","service_mode","indexOf","className","mapDispatchToProps","connect","state","Keypad","buttonClick","is_service_mode","password","useEffect","document","onkeydown","e","key","onClick","mode","BoxBody","App","Boolean","window","location","hostname","match","INITIAL_STATE","cancel","loading","buttonSaga","watchButton","rootSaga","delay","ms","Promise","res","setTimeout","action","fullCode","put","length","substring","fetch","then","response","json","sn","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qQAWaA,EAAa,iBAAK,CAC3BC,KAZuB,kBAmBdC,EAAQ,SAACC,GAAD,MAAS,CAC1BF,KAlBgB,SAmBhBG,QAAQD,IAwBCE,EAAgB,SAACF,GAAD,MAAS,CAClCF,KAvC2B,oBAwC3BG,QAAQD,ICvCRG,EAAS,SAACC,GAAW,IACbC,EAAiGD,EAAjGC,cAAeC,EAAkFF,EAAlFE,KAAMC,EAA4EH,EAA5EG,UAAUC,EAAkEJ,EAAlEI,cAGnCC,EAAO,KACPC,EAFW,CAF0FN,EAApDO,MAAoDP,EAA9CQ,WAA8CR,EAAnCS,QAAmCT,EAA3BU,UAA2BV,EAAjBW,cAIrEC,SAAQ,GAO3B,OANW,IAARN,EAAUD,ECbQ,QDcL,IAARC,EAAUD,ECTQ,gBDUV,IAARC,EAAUD,ECbK,aDcP,IAARC,EAAUD,ECbO,eDcT,IAARC,IAAUD,ECbK,WDgBnB,yBAAKQ,UAAS,iBAAcZ,EAA4B,GAAX,WACzC,yBAAKY,UAAU,qBAAqBV,EEtB5B,SACE,YFsBV,yBAAKU,UAAU,qBAAqBT,ECrB7B,QDqBiDC,GAAcH,KAI5EY,EAAqB,CACvBrB,gBAgBWM,EADfA,EAASgB,aAZe,SAACC,GAAD,MAAY,CAChCf,cAAee,EAAMf,cACrBC,KAAMc,EAAMd,KACZC,UAAWa,EAAMb,UACjBC,cAAcY,EAAMZ,cACpBG,MAAMS,EAAMT,MACZC,WAAYQ,EAAMR,WAClBC,QAAQO,EAAMP,QACdC,UAAUM,EAAMN,UAChBC,aAAaK,EAAML,gBAGWG,EAAzBC,CAA6ChB,GGrClDkB,EAAS,SAACjB,GAAW,IACbkB,EAA4DlB,EAA5DkB,YAAaC,EAA+CnB,EAA/CmB,gBAAiBjB,EAA8BF,EAA9BE,KAAMC,EAAwBH,EAAxBG,UAAWiB,EAAapB,EAAboB,SAiBvD,OAhBAC,qBAAU,WACNC,SAASC,UAAa,SAAAC,GACJ,MAAVA,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACnD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,GACxD,MAAVI,EAAEC,IAAaP,EAAYC,EAAkB,IAAM,GAAIA,EAAiBA,EAAkBjB,EAAOA,EAAO,IAAKC,EAAWiB,GAC9G,MAAVI,EAAEC,KAAaP,EAAYC,EAAkB,IAAM,GAAIA,EAAiBA,EAAkBjB,EAAOA,EAAO,IAAKC,EAAWiB,OAIrI,yBAAKP,UAAU,aACX,yBAAKA,UAAU,UACX,4BAAQA,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KAEA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KAEA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KAEA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAYC,EAAkB,IAAM,GAAIA,EAAiBA,EAAkBjB,EAAOA,EAAO,IAAKC,EAAWiB,KAA3J,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAY,IAAKC,EAAiBjB,EAAMC,EAAWiB,KAArG,KACA,4BAAQP,UAAU,iBAAiBa,QAAS,kBAAMR,EAAYC,EAAkB,IAAM,GAAIA,EAAiBA,EAAkBjB,EAAOA,EAAO,IAAKC,EAAWiB,KAA3J,QAKVN,EAAqB,CACvBI,YJGqB,SAACtB,EAAK+B,EAAKzB,EAAKC,EAAUiB,GAA1B,MAAsC,CAC3D1B,KA1CsB,eA2CtBG,QAAQD,EACRuB,gBAAgBQ,EAChBzB,OACAC,YACAiB,cIAWH,EADfA,EAASF,aANe,SAACC,GAAD,MAAY,CAChCG,gBAAiBH,EAAMG,gBACvBjB,KAAMc,EAAMd,KACZC,UAAWa,EAAMb,UACjBiB,SAAUJ,EAAMI,YAEcN,EAAzBC,CAA6CE,GCzCvCW,MAVf,SAAiB5B,GACb,OACI,yBAAKa,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBAAf,qBCGGgB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCLAC,EAAgB,CAClB/B,eAAe,EACfH,eAAe,EACfE,WAAW,EACXgB,iBAAgB,EAChBZ,OAAO,EAEP6B,QAAQ,EACRC,SAAS,EACT7B,YAAY,EACZG,cAAc,EACdF,SAAS,EACTC,WAAW,EACXR,KAAM,GACNkB,SAAU,M,0CChBJkB,G,WAgDAC,G,WAGeC,GAvDnBC,EAAQ,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAIzD,SAAUJ,EAAWQ,GAArB,2EAEI,OADMC,EAAWD,EAAO5C,KAAO4C,EAAOjD,QAD1C,SAEUmD,YTEoB,CAC1BtD,KAfsB,iBSU1B,OAGI,OAHJ,SAGU+C,EAAM,MAHhB,UAISK,EAAO3B,gBAJhB,sBAMY4B,EAASE,OAAS,IAAgC,IAA3BF,EAASnC,QAAQ,MANpD,iBAOY,OAPZ,SAOkBoC,YTuBM,CACpBtD,KAlCe,USGnB,OAQY,OARZ,UAQkB+C,EAAM,MARxB,mCASoBK,EAAO3C,UAT3B,oBAU6C,IAA7B2C,EAAO5C,KAAKU,QAAQ,KAVpC,iBAWgB,OAXhB,UAWsBoC,YTMS,CAC3BtD,KAzBiB,UA0BjBG,QSR8BiD,EAAO5C,KAAKgD,UAAU,EAAG,KAX3D,QAYgB,OAZhB,UAYsBT,EAAM,KAZ5B,QAagB,OAbhB,UAasBO,YAAIrD,GAAO,IAbjC,QAcgB,OAdhB,UAcsB8C,EAAM,KAd5B,gCAgBgB,OAhBhB,UAgBsBA,EAAM,MAhB5B,oCAkBmBK,EAAO3C,UAlB1B,oBAmB6B,WAAb4C,EAnBhB,iBAoBgB,OApBhB,UAoBsBC,YTMW,CAC7BtD,KAhC0B,qBSK9B,QAqBgB,OArBhB,UAqBsB+C,EAAM,MArB5B,mCAsBuBM,IAAaD,EAAO1B,SAtB3C,iBAuBgB,OAvBhB,UAuBsB4B,aAAcF,EAAO5C,KAAKgD,UAAU,EAAG,GTDhC,CACzBxD,KA7BmB,eSMvB,QAwBgB,OAxBhB,UAwBsB+C,EAAM,KAxB5B,QAyBgB,OAzBhB,UAyBsBO,YAAIrD,GAAO,IAzBjC,QA0BgB,OA1BhB,UA0BsB8C,EAAM,KA1B5B,gCA4BgB,OA5BhB,UA4BsBA,EAAM,MA5B5B,oCA+BeK,EAAO3B,gBA/BtB,iBAgCyB,OAhCzB,UAgC+BgC,MC3Cd,0FD2C0BJ,GAC9BK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAxD,GAAI,OAAIE,EAAgBF,MAlC1C,QAmCQ,OAHMyD,EAhCd,iBAmCcL,YAAIlD,KAnClB,QAoCQ,OApCR,UAoCc2C,EAAM,KApCpB,WEXwB,cFgDF,UAAKY,EAASxD,eAAd,aAAK,EAAkB0D,IArC7C,iBAsCY,OAtCZ,UAsCkBP,YAAIrD,GAAO,IAtC7B,QAuCY,OAvCZ,UAuCkB8C,EAAM,KAvCxB,gCAyCY,OAzCZ,UAyCkBA,EAAM,KAzCxB,QA4CI,OA5CJ,UA4CUO,YT5CqB,CAC3BtD,KAZuB,kBSW3B,QA6CI,OA7CJ,UA6CUsD,YThCgB,CACtBtD,KAtBgB,WSQpB,wCAgDA,SAAU6C,IAAV,iEACI,OADJ,SACUiB,YTnDgB,eSmDSlB,GADnC,uCAGe,SAAUE,IAAV,iEACX,OADW,SACLiB,YAAI,CACNlB,MAFO,uCGlDf,IAAMmB,EAAiBC,cACjBC,EAAQC,aJiBa,WAAoC,IAAnC7C,EAAkC,uDAA1BmB,EAAeW,EAAW,uCAC1D,OAAQA,EAAOpD,MACX,IRhCmB,gBQiCf,OAAO,2BACAsB,GADP,IAEIf,eAAe,IAEvB,IRpCkB,eQqCd,OAAO,2BACAe,GADP,IAEIf,eAAe,IAEvB,IRxCY,SQyCR,OAAO,2BACAe,GADP,IAEIb,UAAW2C,EAAOjD,UAG1B,IR7CY,SQ8CR,OAAO,2BACAmB,GADP,IAEIoB,QAAQ,EACRlC,KAAM,GACNQ,WAAW,EACXF,YAAY,EACZD,OAAM,EACNE,SAAQ,EACRE,cAAa,IAGrB,IRxDa,UQyDT,OAAO,2BACAK,GADP,IAEIP,SAAS,EACTW,SAAU0B,EAAOjD,QACjBW,YAAY,EACZD,OAAM,EACNG,WAAU,EACVC,cAAa,IAErB,IRjEe,YQkEX,OAAO,2BACAK,GADP,IAEIN,WAAW,EACXF,YAAY,EACZD,OAAM,EACNE,SAAQ,EACRE,cAAa,IAGrB,IR1EsB,mBQ2ElB,OAAO,2BACAK,GADP,IAEIL,cAAc,EACdH,YAAY,EACZD,OAAM,EACNE,SAAQ,EACRC,WAAU,EACVS,iBAAgB,IAGxB,IRpFuB,oBQqFnB,OAAO,2BACAH,GADP,IAEIR,YAAY,EACZD,OAAM,EACNE,SAAQ,EACRC,WAAU,EACVC,cAAa,IAGrB,IR7FW,QQ8FP,OAAO,2BACAK,GADP,IAEIT,OAAO,EACPC,YAAY,EACZC,SAAQ,EACRC,WAAU,EACVC,cAAa,IAGrB,IRtGkB,eQuGd,OAAO,2BACAK,GADP,IAEIZ,eAAe,EACfF,KAAMc,EAAMd,KAAO4C,EAAOjD,UAGlC,QACI,OAAOmB,KI1GmB8C,YAAgBJ,IACtDA,EAAeK,IAAIvB,GAGnBwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACjB,kBAAC,EAAD,QAGFtC,SAAS6C,eAAe,SL4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlE,GACLmE,QAAQnE,MAAMA,EAAMoE,c","file":"static/js/main.7a52c75f.chunk.js","sourcesContent":["export const BACKLIGHT_OFF='BACKLIGHT_OFF';\r\nexport const BACKLIGHT_ON='BACKLIGHT_ON';\r\nexport const SUBMIT='SUBMIT';\r\nexport const CANCEL='CANCEL';\r\nexport const LOCKING='LOCKING';\r\nexport const UNLOCKING='UNLOCKING';\r\nexport const RUN_SERVICE_MODE='RUN_SERVICE_MODE';\r\nexport const MASTER_CODE_CHECK='MASTER_CODE_CHECK';\r\nexport const ERROR='ERROR';\r\nexport const BUTTON_CLICK='BUTTON_CLICK';\r\n\r\nexport const backlightOff=()=>({\r\n    type:BACKLIGHT_OFF\r\n})\r\n\r\nexport const backlightOn=()=>({\r\n    type:BACKLIGHT_ON\r\n})\r\n\r\nexport const submit =(data)=>({\r\n    type:SUBMIT,\r\n    payload:data\r\n})\r\n\r\nexport const cancel =()=>({\r\n    type:CANCEL\r\n})\r\n\r\nexport const locking =(data)=>({\r\n    type:LOCKING,\r\n    payload:data\r\n})\r\n\r\nexport const unlocking =()=>({\r\n    type:UNLOCKING\r\n})\r\n\r\nexport const runServiceMode=()=>({\r\n    type:RUN_SERVICE_MODE\r\n})\r\n\r\nexport const error=()=>({\r\n    type:ERROR\r\n})\r\n\r\nexport const masterCodeCheck=(data)=>({\r\n    type:MASTER_CODE_CHECK,\r\n    payload:data\r\n})\r\n\r\nexport const buttonClick=(data,mode,code,is_locked,password)=>({\r\n    type:BUTTON_CLICK,\r\n    payload:data,\r\n    is_service_mode:mode,\r\n    code,\r\n    is_locked,\r\n    password\r\n})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { backlightOff } from '../actions/actions';\r\nimport { errorStatus, lockingStatus, ready, serviceStatus, unlockingStatus, validatingStatus } from '../constants/mainSegmentValues';\r\nimport { locked, unlocked } from '../constants/topLeftSegmentValues'\r\n\r\n\r\n\r\nlet Screen = (props) => {\r\n    const { backlight_off, code, is_locked,initial_value,error,validating,locking,unlocking,service_mode } = props\r\n\r\n    const statuses=[error,validating,locking,unlocking,service_mode]\r\n    let status=null;\r\n    let index=statuses.indexOf(true)\r\n    if(index===0)status=errorStatus\r\n    else if(index===1)status=validatingStatus\r\n    else if(index===2)status=lockingStatus\r\n    else if(index===3)status=unlockingStatus\r\n    else if(index===4)status=serviceStatus\r\n\r\n    return (\r\n        <div className={`screen ${(!backlight_off) ? 'active' : ''}`}>\r\n            <div className='screen__upperText'>{is_locked ? locked : unlocked}</div>\r\n            <div className='screen__lowerText'>{initial_value?ready:status?status:code}</div>\r\n        </div>\r\n    );\r\n}\r\nconst mapDispatchToProps = {\r\n    backlightOff\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    backlight_off: state.backlight_off,\r\n    code: state.code,\r\n    is_locked: state.is_locked,\r\n    initial_value:state.initial_value,\r\n    error:state.error,\r\n    validating: state.validating,\r\n    locking:state.locking,\r\n    unlocking:state.unlocking,\r\n    service_mode:state.service_mode\r\n\r\n});\r\nScreen = connect(mapStateToProps, mapDispatchToProps)(Screen)\r\nexport default Screen;","export const blank='';\r\nexport const errorStatus='Error';\r\nexport const ready='Ready';\r\nexport const lockingStatus='Locking...';\r\nexport const unlockingStatus='Unlocking...';\r\nexport const serviceStatus='Service';\r\nexport const validatingStatus='Validating...';\r\n","export const locked='Locked';\r\nexport const unlocked='Unlocked'","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { buttonClick } from '../actions/actions'\r\n\r\n\r\n\r\nlet Keypad = (props) => {\r\n    const { buttonClick, is_service_mode, code, is_locked, password } = props\r\n    useEffect(() => {\r\n        document.onkeydown = (e => {\r\n            if (e.key === '7') buttonClick('7', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '8') buttonClick('8', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '9') buttonClick('9', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '4') buttonClick('4', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '5') buttonClick('5', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '6') buttonClick('6', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '1') buttonClick('1', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '2') buttonClick('2', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '3') buttonClick('3', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '0') buttonClick('0', is_service_mode, code, is_locked, password)\r\n            else if (e.key === '*') buttonClick(is_service_mode ? '*' : '', is_service_mode, is_service_mode ? code : code + '*', is_locked, password)\r\n            else if (e.key === 'L') buttonClick(is_service_mode ? 'L' : '', is_service_mode, is_service_mode ? code : code + 'L', is_locked, password)\r\n        })\r\n    })\r\n    return (\r\n        <div className='container'>\r\n            <div className='keypad'>\r\n                <button className='keypad__button' onClick={() => buttonClick('7', is_service_mode, code, is_locked, password)}>7</button>\r\n                <button className='keypad__button' onClick={() => buttonClick('8', is_service_mode, code, is_locked, password)}>8</button>\r\n                <button className='keypad__button' onClick={() => buttonClick('9', is_service_mode, code, is_locked, password)}>9</button>\r\n\r\n                <button className='keypad__button' onClick={() => buttonClick('4', is_service_mode, code, is_locked, password)}>4</button>\r\n                <button className='keypad__button' onClick={() => buttonClick('5', is_service_mode, code, is_locked, password)}>5</button>\r\n                <button className='keypad__button' onClick={() => buttonClick('6', is_service_mode, code, is_locked, password)}>6</button>\r\n\r\n                <button className='keypad__button' onClick={() => buttonClick('1', is_service_mode, code, is_locked, password)}>1</button>\r\n                <button className='keypad__button' onClick={() => buttonClick('2', is_service_mode, code, is_locked, password)}>2</button>\r\n                <button className='keypad__button' onClick={() => buttonClick('3', is_service_mode, code, is_locked, password)}>3</button>\r\n\r\n                <button className='keypad__button' onClick={() => buttonClick(is_service_mode ? '*' : '', is_service_mode, is_service_mode ? code : code + '*', is_locked, password)}>*</button>\r\n                <button className='keypad__button' onClick={() => buttonClick('0', is_service_mode, code, is_locked, password)}>0</button>\r\n                <button className='keypad__button' onClick={() => buttonClick(is_service_mode ? 'L' : '', is_service_mode, is_service_mode ? code : code + 'L', is_locked, password)}>L</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst mapDispatchToProps = {\r\n    buttonClick\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    is_service_mode: state.is_service_mode,\r\n    code: state.code,\r\n    is_locked: state.is_locked,\r\n    password: state.password\r\n});\r\nKeypad = connect(mapStateToProps, mapDispatchToProps)(Keypad)\r\nexport default Keypad;","import React from 'react';\r\nimport Screen from './Screen';\r\nimport Keypad from './Keypad';\r\n\r\nfunction BoxBody(props) {\r\n    return (\r\n        <div className='boxbody'>\r\n            <Screen/>\r\n            <Keypad/>\r\n            <div className='boxbody__code'>S/N: 4815162342</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoxBody;","import React from 'react';\r\nimport './App.scss';\r\nimport BoxBody from './components/BoxBody';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <BoxBody />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    BACKLIGHT_OFF,\r\n    BACKLIGHT_ON,\r\n    SUBMIT,\r\n    CANCEL,\r\n    LOCKING,\r\n    UNLOCKING,\r\n    RUN_SERVICE_MODE,\r\n    MASTER_CODE_CHECK,\r\n    ERROR,\r\n    BUTTON_CLICK\r\n} from '../actions/actions'\r\n\r\nconst INITIAL_STATE = {\r\n    initial_value: true,\r\n    backlight_off: true,\r\n    is_locked: false,\r\n    is_service_mode:false,\r\n    error: false,\r\n    // submit: false,\r\n    cancel: false,\r\n    loading: false,\r\n    validating: false,\r\n    service_mode: false,\r\n    locking: false,\r\n    unlocking: false,\r\n    code: '',\r\n    password: null,\r\n}\r\n\r\nexport const rootReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case BACKLIGHT_OFF:\r\n            return {\r\n                ...state,\r\n                backlight_off: true\r\n            }\r\n        case BACKLIGHT_ON:\r\n            return {\r\n                ...state,\r\n                backlight_off: false\r\n            }\r\n        case SUBMIT:\r\n            return {\r\n                ...state,\r\n                is_locked: action.payload,\r\n\r\n            }\r\n        case CANCEL:\r\n            return {\r\n                ...state,\r\n                cancel: true,\r\n                code: '',\r\n                unlocking: false,\r\n                validating: false,\r\n                error:false,\r\n                locking:false,\r\n                service_mode:false\r\n\r\n            }\r\n        case LOCKING:\r\n            return {\r\n                ...state,\r\n                locking: true,\r\n                password: action.payload,\r\n                validating: false,\r\n                error:false,\r\n                unlocking:false,\r\n                service_mode:false\r\n            }\r\n        case UNLOCKING:\r\n            return {\r\n                ...state,\r\n                unlocking: true,\r\n                validating: false,\r\n                error:false,\r\n                locking:false,\r\n                service_mode:false\r\n\r\n            }\r\n        case RUN_SERVICE_MODE:\r\n            return {\r\n                ...state,\r\n                service_mode: true,\r\n                validating: false,\r\n                error:false,\r\n                locking:false,\r\n                unlocking:false,\r\n                is_service_mode:true,\r\n\r\n            }\r\n        case MASTER_CODE_CHECK:\r\n            return {\r\n                ...state,\r\n                validating: true,\r\n                error:false,\r\n                locking:false,\r\n                unlocking:false,\r\n                service_mode:false\r\n\r\n            }\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                validating: false,\r\n                locking:false,\r\n                unlocking:false,\r\n                service_mode:false\r\n\r\n            }\r\n        case BUTTON_CLICK:\r\n            return {\r\n                ...state,\r\n                initial_value: false,\r\n                code: state.code + action.payload,\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { put, all, takeLatest } from 'redux-saga/effects';\r\nimport { BUTTON_CLICK } from '../actions/actions';\r\nimport { backlightOff, backlightOn, locking, cancel, error, submit, unlocking, runServiceMode, masterCodeCheck } from '../actions/actions';\r\nimport { api } from '../constants/api';\r\nimport { masterCode } from '../constants/masterCode';\r\n\r\n\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\r\n\r\n\r\n\r\nfunction* buttonSaga(action) {\r\n    const fullCode = action.code + action.payload;\r\n    yield put(backlightOn())\r\n    yield delay(1200)\r\n    if (!action.is_service_mode) {\r\n\r\n        if (fullCode.length > 6 && fullCode.indexOf('L') === -1) {\r\n            yield put(error())\r\n            yield delay(3800)\r\n        } else if (!action.is_locked) {\r\n            if (action.code.indexOf('L') === 6) {\r\n                yield put(locking(action.code.substring(0, 6)))\r\n                yield delay(3000)\r\n                yield put(submit(true))\r\n                yield delay(800)\r\n            } else {\r\n                yield delay(3800)\r\n            }\r\n        } else if (action.is_locked) {\r\n            if (fullCode === '000000') {\r\n                yield put(runServiceMode())\r\n                yield delay(3800)\r\n            } else if (fullCode === action.password) {\r\n                yield put(unlocking(action.code.substring(0, 6)))\r\n                yield delay(3000)\r\n                yield put(submit(false))\r\n                yield delay(800)\r\n            } else {\r\n                yield delay(3800)\r\n            }\r\n        }\r\n    } else if (action.is_service_mode) {\r\n        const response = yield fetch(api + fullCode)\r\n            .then(response => response.json())\r\n            .then(data => masterCodeCheck(data))\r\n        yield put(masterCodeCheck())\r\n        yield delay(3000)\r\n        if (masterCode === response.payload?.sn) {\r\n            yield put(submit(true))\r\n            yield delay(800)\r\n        }else{\r\n            yield delay(800)\r\n        }\r\n    }\r\n    yield put(backlightOff())\r\n    yield put(cancel())\r\n}\r\n\r\nfunction* watchButton() {\r\n    yield takeLatest(BUTTON_CLICK, buttonSaga)\r\n}\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchButton()\r\n    ])\r\n}","export const api='https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code='","export const masterCode=4815162342","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport {applyMiddleware, createStore } from 'redux';\r\nimport {rootReducer} from './reducer/rootReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './sagas/rootSaga'\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer,applyMiddleware(sagaMiddleware))\r\nsagaMiddleware.run(rootSaga)\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}